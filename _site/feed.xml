<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-10T16:45:12-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Journey with Data</title><subtitle>The Deeper You Dive, The Clearer You Will See</subtitle><author><name>Jamal Kaplan</name></author><entry><title type="html">Gender Equality in Movie Industry.</title><link href="http://localhost:4000/2022/08/04/Bechdel_Test.html" rel="alternate" type="text/html" title="Gender Equality in Movie Industry." /><published>2022-08-04T07:45:13-07:00</published><updated>2022-08-04T07:45:13-07:00</updated><id>http://localhost:4000/2022/08/04/Bechdel_Test</id><content type="html" xml:base="http://localhost:4000/2022/08/04/Bechdel_Test.html"><![CDATA[<p>Gender equality has been one of the hot topics for long time. There have been numerous stucdies, activities, and even law changes in order order to improve the gender equalities. Altghouh there is visible development in this regard, There is still more to do.</p>

<p>In this project I will analyze the gender equality or improvement in the movie industry. For that purpose, Bechdel Test will be employed. The Bechdel Test is comming from the idea that Alison Bechdel introduced in a comic strip  and it has simple rules:</p>
<ol>
  <li>At least two women</li>
  <li>The women need to talk to each other</li>
  <li>They need to talk to each other about something other than a man</li>
</ol>

<!-- ![img]("https://images.unsplash.com/photo-1603202662706-62ead3176b8f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=669&q=80")
 -->

<p>The requirement of Bechdel Test is uncomplicated and asumming the majority of movies will be succesfull in terms of gender equality.</p>

<h3 id="looked-for-couple-of-insight">Looked for Couple of Insight</h3>

<ol>
  <li>Any Change of woman employment in movies over the years.</li>
  <li>The relationship of movie budget and woman employment if any.</li>
  <li>Female director imapct on the woman employment rate.</li>
  <li>Movie budget imapct on the woman employment rate.</li>
  <li>The woman employment rate impact on the movie revenue imapact.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Importing Data From bechdeltest.com by their API
</span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_json</span><span class="p">(</span><span class="s">'http://bechdeltest.com/api/v1/getAllMovies'</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>rating</th>
      <th>imdbid</th>
      <th>year</th>
      <th>id</th>
      <th>title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>3155794</td>
      <td>1874</td>
      <td>9602</td>
      <td>Passage de Venus</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>14495706</td>
      <td>1877</td>
      <td>9804</td>
      <td>La Rosace Magique</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>2221420</td>
      <td>1878</td>
      <td>9603</td>
      <td>Sallie Gardner at a Gallop</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>12592084</td>
      <td>1878</td>
      <td>9806</td>
      <td>Le singe musicien</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>7816420</td>
      <td>1881</td>
      <td>9816</td>
      <td>Athlete Swinging a Pick</td>
    </tr>
  </tbody>
</table>
</div>

<!-- <iframe src = "/img/bechdel/table.html" height = "350px" width = "100%"></iframe> -->

<p>There are five features in data frame. Rating is the most I will work on because here it will be the main criteria to check if the movie pass the test or not. Rating less than 3 means failre while greater than 3 means pass.</p>

<p>Since the world does not have such a succes on gender equality in past let`s analyze data after 1970s.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">[</span><span class="s">'rating'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3    5451
1    2085
0    1069
2     965
Name: rating, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">'year'</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">1970</span><span class="p">]</span>
<span class="n">data_bechdel</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>rating</th>
      <th>imdbid</th>
      <th>year</th>
      <th>id</th>
      <th>title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1356</th>
      <td>0</td>
      <td>0065531</td>
      <td>1970</td>
      <td>255</td>
      <td>Le Cercle Rouge</td>
    </tr>
    <tr>
      <th>1357</th>
      <td>3</td>
      <td>0065466</td>
      <td>1970</td>
      <td>583</td>
      <td>Beyond the Valley of the Dolls</td>
    </tr>
    <tr>
      <th>1358</th>
      <td>3</td>
      <td>0065421</td>
      <td>1970</td>
      <td>1122</td>
      <td>AristoCats, The</td>
    </tr>
    <tr>
      <th>1359</th>
      <td>1</td>
      <td>0066327</td>
      <td>1970</td>
      <td>1726</td>
      <td>Santa Clause is Comin&amp;#39; to Town</td>
    </tr>
    <tr>
      <th>1360</th>
      <td>1</td>
      <td>0064806</td>
      <td>1970</td>
      <td>1932</td>
      <td>Phantom Tollbooth, The</td>
    </tr>
  </tbody>
</table>
</div>

<p>I am now going to rename the column ‘rating’ to ‘Bechdel Score’, to make things clearer for the rest of the analysis.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'rating'</span><span class="p">:</span><span class="s">'Bechdel Score'</span><span class="p">},</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Bechdel Score</th>
      <th>imdbid</th>
      <th>year</th>
      <th>id</th>
      <th>title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1356</th>
      <td>0</td>
      <td>0065531</td>
      <td>1970</td>
      <td>255</td>
      <td>Le Cercle Rouge</td>
    </tr>
    <tr>
      <th>1357</th>
      <td>3</td>
      <td>0065466</td>
      <td>1970</td>
      <td>583</td>
      <td>Beyond the Valley of the Dolls</td>
    </tr>
    <tr>
      <th>1358</th>
      <td>3</td>
      <td>0065421</td>
      <td>1970</td>
      <td>1122</td>
      <td>AristoCats, The</td>
    </tr>
    <tr>
      <th>1359</th>
      <td>1</td>
      <td>0066327</td>
      <td>1970</td>
      <td>1726</td>
      <td>Santa Clause is Comin&amp;#39; to Town</td>
    </tr>
    <tr>
      <th>1360</th>
      <td>1</td>
      <td>0064806</td>
      <td>1970</td>
      <td>1932</td>
      <td>Phantom Tollbooth, The</td>
    </tr>
  </tbody>
</table>
</div>

<!-- <iframe src = "/img/bechdel/table2. html" height = "350px" width = "100%"></iframe> -->

<p>Here I am going to convert the ‘year’ column into a datetime object to analyze data. easily.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span><span class="p">[</span><span class="s">'year'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">(</span> <span class="n">data_bechdel</span><span class="p">[</span><span class="s">'year'</span><span class="p">],</span><span class="nb">format</span><span class="o">=</span><span class="s">'%Y'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Bechdel Score</th>
      <th>imdbid</th>
      <th>year</th>
      <th>id</th>
      <th>title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1356</th>
      <td>0</td>
      <td>0065531</td>
      <td>1970-01-01</td>
      <td>255</td>
      <td>Le Cercle Rouge</td>
    </tr>
    <tr>
      <th>1357</th>
      <td>3</td>
      <td>0065466</td>
      <td>1970-01-01</td>
      <td>583</td>
      <td>Beyond the Valley of the Dolls</td>
    </tr>
    <tr>
      <th>1358</th>
      <td>3</td>
      <td>0065421</td>
      <td>1970-01-01</td>
      <td>1122</td>
      <td>AristoCats, The</td>
    </tr>
    <tr>
      <th>1359</th>
      <td>1</td>
      <td>0066327</td>
      <td>1970-01-01</td>
      <td>1726</td>
      <td>Santa Clause is Comin&amp;#39; to Town</td>
    </tr>
    <tr>
      <th>1360</th>
      <td>1</td>
      <td>0064806</td>
      <td>1970-01-01</td>
      <td>1932</td>
      <td>Phantom Tollbooth, The</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>9565</th>
      <td>1</td>
      <td>13145534</td>
      <td>2022-01-01</td>
      <td>10370</td>
      <td>Incroyable mais vrai</td>
    </tr>
    <tr>
      <th>9566</th>
      <td>2</td>
      <td>10298810</td>
      <td>2022-01-01</td>
      <td>10371</td>
      <td>Lightyear</td>
    </tr>
    <tr>
      <th>9567</th>
      <td>3</td>
      <td>3513500</td>
      <td>2022-01-01</td>
      <td>10372</td>
      <td>Chip &amp;#39;n Dale: Rescue Rangers</td>
    </tr>
    <tr>
      <th>9568</th>
      <td>1</td>
      <td>14169960</td>
      <td>2022-01-01</td>
      <td>10375</td>
      <td>All of Us Are Dead</td>
    </tr>
    <tr>
      <th>9569</th>
      <td>3</td>
      <td>15521050</td>
      <td>2022-01-01</td>
      <td>10382</td>
      <td>Love and Gelato</td>
    </tr>
  </tbody>
</table>
<p>8214 rows × 5 columns</p>
</div>

<p>Next,  Bechdel Scores needs to be converted to categorical variables.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span><span class="p">[</span><span class="s">'Bechdel Score'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_bechdel</span><span class="p">[</span><span class="s">'Bechdel Score'</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="s">'category'</span><span class="p">,</span><span class="n">copy</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Bechdel Score</th>
      <th>imdbid</th>
      <th>year</th>
      <th>id</th>
      <th>title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1356</th>
      <td>0</td>
      <td>0065531</td>
      <td>1970-01-01</td>
      <td>255</td>
      <td>Le Cercle Rouge</td>
    </tr>
    <tr>
      <th>1357</th>
      <td>3</td>
      <td>0065466</td>
      <td>1970-01-01</td>
      <td>583</td>
      <td>Beyond the Valley of the Dolls</td>
    </tr>
    <tr>
      <th>1358</th>
      <td>3</td>
      <td>0065421</td>
      <td>1970-01-01</td>
      <td>1122</td>
      <td>AristoCats, The</td>
    </tr>
    <tr>
      <th>1359</th>
      <td>1</td>
      <td>0066327</td>
      <td>1970-01-01</td>
      <td>1726</td>
      <td>Santa Clause is Comin&amp;#39; to Town</td>
    </tr>
    <tr>
      <th>1360</th>
      <td>1</td>
      <td>0064806</td>
      <td>1970-01-01</td>
      <td>1932</td>
      <td>Phantom Tollbooth, The</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span>
<span class="n">data_bechdel</span><span class="p">.</span><span class="n">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 8214 entries, 1356 to 9569
Data columns (total 5 columns):
 #   Column         Non-Null Count  Dtype         
---  ------         --------------  -----         
 0   Bechdel Score  8214 non-null   category      
 1   imdbid         8214 non-null   object        
 2   year           8214 non-null   datetime64[ns]
 3   id             8214 non-null   int64         
 4   title          8214 non-null   object        
dtypes: category(1), datetime64[ns](1), int64(1), object(2)
memory usage: 329.1+ KB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">import</span> <span class="n">figure</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'Bechdel Score'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span> <span class="n">data_bechdel</span><span class="p">);</span>
<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">patches</span><span class="p">:</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">'{:.1f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">get_height</span><span class="p">()),</span> <span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">get_x</span><span class="p">()</span><span class="o">+</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">get_height</span><span class="p">()</span><span class="o">+</span><span class="mi">40</span><span class="p">))</span>


</code></pre></div></div>

<p><img src="/img/bechdel/Bechdel_Test_18_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Lets check if the movies pass bechdel test
</span><span class="n">li</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data_bechdel</span><span class="p">[</span><span class="s">'Bechdel Score'</span><span class="p">]:</span>
  <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">li</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="n">li</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">data_bechdel</span><span class="p">[</span><span class="s">'pass'</span><span class="p">]</span> <span class="o">=</span> <span class="n">li</span>
<span class="n">data_bechdel</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">data_bechdel</span><span class="p">[</span><span class="s">'pass'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1    4895
0    3319
Name: pass, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data_bechdel</span><span class="p">,</span><span class="n">x</span><span class="o">=</span><span class="s">'pass'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">patches</span><span class="p">:</span>
   <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">'{:.1f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">()),</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_x</span><span class="p">()</span><span class="o">+</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">()</span><span class="o">+</span><span class="mi">40</span><span class="p">))</span>

</code></pre></div></div>

<p><img src="/img/bechdel/Bechdel_Test_21_0.png" alt="png" /></p>

<!-- <iframe src = "/img/bechdel/graph2.png" height = "350px" width = "100%"></iframe> -->

<p>Lets Check the relationship between Imdb rating and bechdel scores</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pandas.core.reshape.merge</span> <span class="kn">import</span> <span class="n">merge</span>

<span class="n">url</span> <span class="o">=</span> <span class="sa">r</span><span class="s">"https://raw.githubusercontent.com/Natassha/Bechdel-Test/master/movies.csv"</span>
<span class="n">imdb</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">'cp1252'</span><span class="p">)</span>
<span class="n">imdb</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">imdbNew</span> <span class="o">=</span> <span class="n">imdb</span><span class="p">[[</span><span class="s">'title'</span><span class="p">,</span><span class="s">'rating'</span><span class="p">]]</span>
<span class="n">imdbNew</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data_bechdel</span><span class="p">)</span><span class="o">+</span><span class="n">geom_point</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="s">'year'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="n">data_bechdel</span><span class="p">[</span><span class="s">'Bechdel Score'</span><span class="p">]),</span><span class="n">stat</span><span class="o">=</span><span class="s">'count'</span><span class="p">,</span><span class="n">show_legend</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">+</span><span class="n">geom_line</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="s">'year'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="n">data_bechdel</span><span class="p">[</span><span class="s">'Bechdel Score'</span><span class="p">]),</span><span class="n">stat</span><span class="o">=</span><span class="s">'count'</span><span class="p">,</span><span class="n">show_legend</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>

</code></pre></div></div>
<p><img src="/img/bechdel/Bechdel_Test_25_0.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ggplot: (8762740129624)&gt;
</code></pre></div></div>

<!-- <iframe src = "/img/bechdel/table3.png" height = "350px" width = "100%"></iframe> -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bechdel</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">data_bechdel</span><span class="p">,</span><span class="n">imdbNew</span><span class="p">,</span> <span class="n">how</span> <span class="o">=</span><span class="s">'left'</span><span class="p">,</span>
                 <span class="n">left_on</span> <span class="o">=</span> <span class="p">[</span><span class="s">'title'</span><span class="p">],</span> <span class="n">right_on</span> <span class="o">=</span> <span class="p">[</span><span class="s">'title'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">data_bechdel</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">data_bechdel</span><span class="p">[</span><span class="s">'rating'</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">sort_index</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>9.9    1
9.8    3
9.6    2
9.5    1
9.4    1
      ..
1.9    2
1.8    2
1.7    1
1.6    2
1.2    1
Name: rating, Length: 81, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">scatterplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span><span class="n">data_bechdel</span><span class="p">[</span><span class="s">'Bechdel Score'</span><span class="p">],</span>
                <span class="n">y</span> <span class="o">=</span> <span class="n">data_bechdel</span><span class="p">[</span><span class="s">'rating'</span><span class="p">],</span><span class="n">data</span><span class="o">=</span><span class="n">data_bechdel</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/img/bechdel/Bechdel_Test_29_0.png" alt="png" /></p>

<!-- <iframe src = "/img/bechdel/graph4.png" height = "350px" width = "100%"></iframe> -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Droping rows with null values
</span><span class="n">data_bechdel</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">data_bechdel</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'id'</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>Creaing new dataframe with only year, bechdel score and rating</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new</span> <span class="o">=</span> <span class="n">data_bechdel</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'year'</span><span class="p">,</span><span class="s">'Bechdel Score'</span><span class="p">]).</span><span class="n">agg</span><span class="p">({</span><span class="s">'rating'</span><span class="p">:</span><span class="s">'mean'</span><span class="p">}).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">new</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>Bechdel Score</th>
      <th>rating</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1970-01-01</td>
      <td>0</td>
      <td>7.150000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1970-01-01</td>
      <td>1</td>
      <td>7.054545</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1970-01-01</td>
      <td>2</td>
      <td>6.866667</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1970-01-01</td>
      <td>3</td>
      <td>6.440000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1971-01-01</td>
      <td>0</td>
      <td>6.875000</td>
    </tr>
  </tbody>
</table>
</div>

<!-- <iframe src = "/img/bechdel/table4.html" height = "350px" width = "100%"></iframe> -->

<h2 id="visualizing-the-relationship">Visualizing the relationship</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">scatterplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'year'</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'rating'</span><span class="p">,</span><span class="n">hue</span><span class="o">=</span><span class="s">'Bechdel Score'</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">new</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'year'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">17</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'rating'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">17</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Comparison of Rating and Bechdel Score Over the Yars'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">14</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'red'</span><span class="p">);</span>
</code></pre></div></div>
<p><img src="/img/bechdel/Bechdel_Test_36_0.png" alt="png" /></p>

<!-- <iframe src = "/img/bechdel/graph5.png" height = "350px" width = "100%"></iframe> -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot year against IMDB rating and Bechdel Score:
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">new</span><span class="p">,</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'year'</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">'rating'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'Bechdel Score'</span><span class="p">))</span><span class="o">+</span> <span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="n">geom_smooth</span><span class="p">()</span><span class="o">+</span><span class="n">scale_y_continuous</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"imdb rating"</span><span class="p">)</span><span class="o">+</span><span class="n">labs</span><span class="p">(</span> <span class="n">colour</span><span class="o">=</span><span class="s">'Bechdel Score'</span> <span class="p">)</span><span class="o">+</span> <span class="n">ggtitle</span><span class="p">(</span><span class="s">"Bechdel Score vs IMDB Rating Changes Over the Years"</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="/img/bechdel/Bechdel_Test_38_0.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ggplot: (8762740129783)&gt;
</code></pre></div></div>

<!-- <iframe src = "/img/bechdel/graph6.png" height = "350px" width = "100%"></iframe> -->

<p>It appears as though movies that pass the Bechdel test have significantly lower IMDB ratings compared to movies that don’t, which was pretty surprising to me.</p>

<p>Now, I will try to visualize the relationship between the gender of the director and Bechdel scores. I assume that movies with female directors are more likely to have higher Bechdel scores, which I will try to plot here.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">url</span> <span class="o">=</span> <span class="sa">r</span><span class="s">"https://raw.githubusercontent.com/Natassha/Bechdel-Test/master/movielatest.csv"</span>
<span class="n">latest</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">'cp1252'</span><span class="p">)</span>
<span class="n">latest</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">dfLatest</span> <span class="o">=</span> <span class="n">latest</span><span class="p">[[</span><span class="s">'name'</span><span class="p">,</span><span class="s">'director'</span><span class="p">]]</span>
<span class="n">dfLatest</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'name'</span><span class="p">:</span><span class="s">'title'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">data_combined</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">data_bechdel</span><span class="p">,</span> <span class="n">dfLatest</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s">'left'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="p">[</span><span class="s">'title'</span><span class="p">],</span> <span class="n">right_on</span><span class="o">=</span><span class="p">[</span><span class="s">'title'</span><span class="p">])</span>
<span class="n">data_combined</span> <span class="o">=</span> <span class="n">data_combined</span><span class="p">.</span><span class="n">dropna</span><span class="p">()</span>
<span class="n">data_combined</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>


</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Bechdel Score</th>
      <th>imdbid</th>
      <th>year</th>
      <th>title</th>
      <th>pass</th>
      <th>rating</th>
      <th>director</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>35</th>
      <td>1</td>
      <td>0067800</td>
      <td>1971-01-01</td>
      <td>Straw Dogs</td>
      <td>0</td>
      <td>7.4</td>
      <td>Rod Lurie</td>
    </tr>
    <tr>
      <th>36</th>
      <td>1</td>
      <td>0067741</td>
      <td>1971-01-01</td>
      <td>Shaft</td>
      <td>0</td>
      <td>6.5</td>
      <td>John Singleton</td>
    </tr>
    <tr>
      <th>37</th>
      <td>1</td>
      <td>0067741</td>
      <td>1971-01-01</td>
      <td>Shaft</td>
      <td>0</td>
      <td>6.0</td>
      <td>John Singleton</td>
    </tr>
    <tr>
      <th>53</th>
      <td>1</td>
      <td>0067128</td>
      <td>1971-01-01</td>
      <td>Get Carter</td>
      <td>0</td>
      <td>7.4</td>
      <td>Stephen Kay</td>
    </tr>
    <tr>
      <th>54</th>
      <td>1</td>
      <td>0067128</td>
      <td>1971-01-01</td>
      <td>Get Carter</td>
      <td>0</td>
      <td>4.7</td>
      <td>Stephen Kay</td>
    </tr>
  </tbody>
</table>
</div>

<!-- <iframe src = "/img/bechdel/table5.html" height = "350px" width = "100%"></iframe> -->

<p>The newly created data frame now has an additional variable in it; director. I will now try to predict the gender of the director given their first name, and append it to the data frame.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># !pip install gender-guesser
</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">gender_guesser.detector</span> <span class="k">as</span> <span class="n">gen</span>
<span class="c1"># Predicting gender of director from first name:
</span><span class="n">d</span> <span class="o">=</span> <span class="n">gen</span><span class="p">.</span><span class="n">Detector</span><span class="p">()</span>
<span class="n">genders</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">firstNames</span> <span class="o">=</span> <span class="n">data_combined</span><span class="p">[</span><span class="s">'director'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">split</span><span class="p">().</span><span class="nb">str</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">firstNames</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">firstNames</span><span class="p">)]:</span>
    <span class="k">if</span> <span class="n">d</span><span class="p">.</span><span class="n">get_gender</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="s">'male'</span><span class="p">:</span>
        <span class="n">genders</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'male'</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">d</span><span class="p">.</span><span class="n">get_gender</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="s">'female'</span><span class="p">:</span>
        <span class="n">genders</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'female'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">genders</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'unknown'</span><span class="p">)</span>
<span class="n">data_combined</span><span class="p">[</span><span class="s">'gender'</span><span class="p">]</span> <span class="o">=</span> <span class="n">genders</span>
<span class="n">data_combined</span> <span class="o">=</span> <span class="n">data_combined</span><span class="p">[</span><span class="n">data_combined</span><span class="p">[</span><span class="s">'gender'</span><span class="p">]</span> <span class="o">!=</span> <span class="s">'unknown'</span><span class="p">]</span>
<span class="c1"># Encode the variable gender into a new dataframe:
</span><span class="n">data_combined</span><span class="p">[</span><span class="s">'Male'</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_combined</span><span class="p">[</span><span class="s">'gender'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span> <span class="p">{</span><span class="s">'male'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">'female'</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span> <span class="p">)</span>
<span class="n">data_combined</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Bechdel Score</th>
      <th>imdbid</th>
      <th>year</th>
      <th>title</th>
      <th>pass</th>
      <th>rating</th>
      <th>director</th>
      <th>gender</th>
      <th>Male</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>35</th>
      <td>1</td>
      <td>0067800</td>
      <td>1971-01-01</td>
      <td>Straw Dogs</td>
      <td>0</td>
      <td>7.4</td>
      <td>Rod Lurie</td>
      <td>male</td>
      <td>1</td>
    </tr>
    <tr>
      <th>36</th>
      <td>1</td>
      <td>0067741</td>
      <td>1971-01-01</td>
      <td>Shaft</td>
      <td>0</td>
      <td>6.5</td>
      <td>John Singleton</td>
      <td>male</td>
      <td>1</td>
    </tr>
    <tr>
      <th>37</th>
      <td>1</td>
      <td>0067741</td>
      <td>1971-01-01</td>
      <td>Shaft</td>
      <td>0</td>
      <td>6.0</td>
      <td>John Singleton</td>
      <td>male</td>
      <td>1</td>
    </tr>
    <tr>
      <th>53</th>
      <td>1</td>
      <td>0067128</td>
      <td>1971-01-01</td>
      <td>Get Carter</td>
      <td>0</td>
      <td>7.4</td>
      <td>Stephen Kay</td>
      <td>male</td>
      <td>1</td>
    </tr>
    <tr>
      <th>54</th>
      <td>1</td>
      <td>0067128</td>
      <td>1971-01-01</td>
      <td>Get Carter</td>
      <td>0</td>
      <td>4.7</td>
      <td>Stephen Kay</td>
      <td>male</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>

<!-- <iframe src = "/img/bechdel/table6.html" height = "350px" width = "100%"></iframe> -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'gender'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span> <span class="n">data_combined</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Number of Diredtors in Both Gender"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">patches</span><span class="p">:</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">'{:.1f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">()),</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_x</span><span class="p">()</span><span class="o">+</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">()</span><span class="o">+</span><span class="mi">10</span><span class="p">))</span>

</code></pre></div></div>
<p><img src="/img/bechdel/Bechdel_Test_47_0.png" alt="png" /></p>

<!-- <iframe src = "/img/bechdel/graph.png7" height = "350px" width = "100%"></iframe> -->

<p>Next, I will visualize the gender of the director with the Bechdel score, to see if movies with female directors have a higher score.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.3</span><span class="p">)</span>
<span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'Bechdel Score'</span><span class="p">,</span><span class="n">hue</span><span class="o">=</span><span class="s">'gender'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data_combined</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Bechdel Score'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'gender'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Number of Each Score for Both Gender Directors"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">patches</span><span class="p">:</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">annotate</span><span class="p">(</span><span class="s">'{:.1f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">()),</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">get_x</span><span class="p">()</span><span class="o">+</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">get_height</span><span class="p">()</span><span class="o">+</span><span class="mi">10</span><span class="p">))</span>

</code></pre></div></div>
<p><img src="/img/bechdel/Bechdel_Test_50_0.png" alt="png" /></p>

<!-- <iframe src = "/img/bechdel/graph.png8" height = "350px" width = "100%"></iframe> -->

<p>Next, I will take a look at the variable budget, to see if there is any kind of correlation between the budget of a movie and it’s Bechdel score.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_combined</span><span class="p">[</span><span class="s">'budget'</span><span class="p">]</span><span class="o">=</span><span class="n">latest</span><span class="p">[</span><span class="s">'budget'</span><span class="p">]</span>
<span class="n">ggplot</span><span class="p">(</span><span class="n">data_combined</span><span class="p">,</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'year'</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span><span class="s">'budget'</span> <span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'Bechdel Score'</span><span class="p">))</span><span class="o">+</span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="n">geom_smooth</span><span class="p">()</span><span class="o">+</span> <span class="n">ggtitle</span><span class="p">(</span><span class="s">"Bechdel Score vs Budget Changes Over the Years"</span><span class="p">)</span>

</code></pre></div></div>

<p><img src="/img/bechdel/Bechdel_Test_53_0.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ggplot: (8762740166012)&gt;
</code></pre></div></div>

<!-- <iframe src = "/img/bechdel/graph.png9" height = "350px" width = "100%"></iframe> -->

<p>Now, I will visualize the relationship between budget and gender of the director:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_combined</span><span class="p">[</span><span class="s">'budget'</span><span class="p">]</span><span class="o">=</span><span class="n">latest</span><span class="p">[</span><span class="s">'budget'</span><span class="p">]</span>
<span class="c1"># Visualize budget and gender of director
</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data_combined</span><span class="p">,</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'year'</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'budget'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'gender'</span><span class="p">))</span><span class="o">+</span>\
<span class="n">geom_point</span><span class="p">()</span><span class="o">+</span><span class="n">geom_smooth</span><span class="p">()</span><span class="o">+</span>\
<span class="n">ggtitle</span><span class="p">(</span><span class="s">"Bechdel Score vs Gender Changes Over the Years"</span><span class="p">)</span>

</code></pre></div></div>
<p><img src="/img/bechdel/Bechdel_Test_56_0.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ggplot: (8762622883904)&gt;
</code></pre></div></div>

<!-- <iframe src = "/img/bechdel/graph.png10" height = "350px" width = "100%"></iframe> -->

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_combined</span><span class="p">[</span><span class="s">'gross'</span><span class="p">]</span><span class="o">=</span><span class="n">latest</span><span class="p">[</span><span class="s">'gross'</span><span class="p">]</span>
<span class="n">ggplot</span><span class="p">(</span><span class="n">data_combined</span><span class="p">,</span><span class="n">aes</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'year'</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'gross'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'gender'</span><span class="p">))</span><span class="o">+</span><span class="n">geom_point</span><span class="p">()</span><span class="o">+</span> <span class="n">ggtitle</span><span class="p">(</span><span class="s">"Gross Revenue vs Director Gender Changes Over the Years"</span><span class="p">)</span>

</code></pre></div></div>

<p><img src="/img/bechdel/Bechdel_Test_58_0.png" alt="png" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ggplot: (8762724703166)&gt;
</code></pre></div></div>

<!-- <iframe src = "/img/bechdel/graph.png11" height = "350px" width = "100%"></iframe> -->

<dv class="">
And that’s it! I managed to visualize relationships and answer all the data questions I set out to find answers to.

Some interesting data findings include:

1. Movies that fail the Bechdel test tend to have higher IMDB ratings.<br />
2. Over the years, there has been an increasing number of movies that pass the Bechdel test.<br />
3. Movies with female directors have higher Bechdel scores.
4. There is no clear correlation between the budget or revenue of a movie and its Bechdel score.
Of course, this analysis was only done with the data I gathered from three places, and might not represent the entire population of movies out there.

Furthermore, there may have been other variables present that affected the outcome of this analysis, and it might be a good idea to experiment with data from a couple of other places before coming to a conclusion.

Finally, I would like to mention that the Bechdel test is not necessarily the best benchmark to measure female representation in movies. It does not take into consideration how well written a female character is, neither does it measure meaningful depth of character.

However, it is one of the most well-known metrics used to expose gender bias and is the only test we have this kind of data on.

<dv class="" />
</dv>]]></content><author><name>Jamal Kaplan</name></author><summary type="html"><![CDATA[Gender equality has been one of the hot topics for long time. There have been numerous stucdies, activities, and even law changes in order order to improve the gender equalities. Altghouh there is visible development in this regard, There is still more to do.]]></summary></entry><entry><title type="html">London Boroghs` House Price.</title><link href="http://localhost:4000/2022/06/07/London-Boroghs-House-Price.html" rel="alternate" type="text/html" title="London Boroghs` House Price." /><published>2022-06-07T07:45:13-07:00</published><updated>2022-06-07T07:45:13-07:00</updated><id>http://localhost:4000/2022/06/07/London%20Boroghs%60%20House%20Price</id><content type="html" xml:base="http://localhost:4000/2022/06/07/London-Boroghs-House-Price.html"><![CDATA[<h2 id="objectives">Objectives</h2>

<p>Here’s we’re going to solve: <strong><em>which boroughs of London have seen the greatest increase in housing prices, on average, over the last two decades?</em></strong></p>

<p>A borough is just a fancy word for district. You may be familiar with the five boroughs of New York… well, there are 32 boroughs within Greater London <a href="https://en.wikipedia.org/wiki/London_boroughs">(here’s some info for the curious)</a>. Some of them are more desirable areas to live in, and the data will reflect that with a greater rise in housing prices.</p>

<h3 id="1-sourcing-and-loading">1. Sourcing and Loading</h3>

<h4 id="11-importing-libraries">1.1. Importing Libraries</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's import the pandas, numpy libraries as pd, and np respectively. 
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>



<span class="c1"># Load the pyplot collection of functions from matplotlib, as plt 
</span><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<h4 id="12--loading-the-data">1.2.  Loading the data</h4>
<p>Your data comes from the <a href="https://data.london.gov.uk/">London Datastore</a>: a free, open-source data-sharing portal for London-oriented datasets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First, make a variable called url_LondonHousePrices, and assign it the following link, enclosed in quotation-marks as a string:
</span>
<span class="n">url_LondonHousePrices</span> <span class="o">=</span> <span class="s">"https://data.london.gov.uk/download/uk-house-price-index/70ac0766-8902-4eb5-aab5-01951aaed773/UK%20House%20price%20index.xls"</span>

<span class="c1"># The dataset we're interested in contains the Average prices of the houses, and is actually on a particular sheet of the Excel file. 
# As a result, we need to specify the sheet name in the read_excel() method.
# Put this data into a variable called properties.  
</span><span class="n">properties</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_excel</span><span class="p">(</span><span class="n">url_LondonHousePrices</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="s">'Average price'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span> <span class="bp">None</span><span class="p">)</span>

<span class="n">properties</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Making copy Transposed dataframe
</span><span class="n">Data_copy</span> <span class="o">=</span> <span class="n">properties</span><span class="p">.</span><span class="n">T</span>
<span class="n">Data_copy</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Use 3 decimal places in output display
</span><span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">"display.precision"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy</span><span class="p">.</span><span class="n">index</span>
</code></pre></div></div>

<p>Since the Boroughs name is index it should be resetted cause it is one of the feature that we will work on.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Call the .reset_index() method on Data_copy to reset the indices, and the reassign the result to properties_T: 
</span><span class="n">Data_copy</span> <span class="o">=</span> <span class="n">Data_copy</span><span class="p">.</span><span class="n">reset_index</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy</span><span class="p">.</span><span class="n">index</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Call the iloc[] method with double square brackets on the properties_T DataFrame, to see the row at index 0. 
</span><span class="n">Data_copy</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">Data_copy</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Have a go at this now. 
</span><span class="n">Data_copy</span> <span class="o">=</span> <span class="n">Data_copy</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">Data_copy</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

</code></pre></div></div>

<iframe src="/img/london_borough/indextable.html" height="300px" width="100%"></iframe>

<h3 id="2-cleaning-transforming-and-visualizing">2. Cleaning, transforming, and visualizing</h3>
<p>The end goal of data cleaning is to have tidy data. When data is tidy:</p>

<ol>
  <li>Each variable has a column.</li>
  <li>Each observation forms a row.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Try this here. 
</span><span class="n">Data_copy</span> <span class="o">=</span> <span class="n">Data_copy</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Unnamed: 0'</span><span class="p">:</span><span class="s">'London_Borough'</span><span class="p">,</span> <span class="n">pd</span><span class="p">.</span><span class="n">NaT</span><span class="p">:</span> <span class="s">'ID'</span><span class="p">})</span> 
<span class="n">Data_copy</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy</span><span class="p">.</span><span class="n">columns</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Using Melt function to make dataframe tidier
</span><span class="n">Data_copy_clean</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">melt</span><span class="p">(</span><span class="n">Data_copy</span><span class="p">,</span> <span class="n">id_vars</span><span class="o">=</span> <span class="p">[</span><span class="s">'London_Borough'</span><span class="p">,</span> <span class="s">'ID'</span><span class="p">])</span>
<span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Re-name the column names
</span><span class="n">Data_copy_clean</span> <span class="o">=</span> <span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="s">'Month'</span><span class="p">,</span> <span class="s">'value'</span><span class="p">:</span> <span class="s">'Average_price'</span><span class="p">})</span>
<span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's use the .dtypes attribute to check the data types of our clean_properties DataFrame:
</span><span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">dtypes</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Lets change price datatype from object to float
</span><span class="n">Data_copy_clean</span><span class="p">[</span><span class="s">'Average_price'</span><span class="p">]</span> <span class="o">=</span> <span class="n">Data_copy_clean</span><span class="p">[</span><span class="s">'Average_price'</span><span class="p">].</span><span class="n">astype</span><span class="p">(</span><span class="s">'float'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">dtypes</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">count</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lets check how many unique observation we have. 
</span><span class="n">Data_copy_clean</span><span class="p">[</span><span class="s">'London_Borough'</span><span class="p">].</span><span class="n">unique</span><span class="p">()</span>
</code></pre></div></div>

<p>Some of these strings are not London boroughs. 
The strings that don’t belong:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'Unnamed: 34'
'Unnamed: 37'
'NORTH EAST'
'NORTH WEST'
'YORKS &amp; THE HUMBER'
'EAST MIDLANDS'
'WEST MIDLANDS'
'EAST OF ENGLAND'
'LONDON'
'SOUTH EAST'
'SOUTH WEST'
'Unnamed: 47'
'England' Let see what information is contained in rows where London_Boroughs is 'Unnamed’ and, if there’s nothing valuable, we can drop them. To investigate, subset the clean_properties DataFrame on this condition.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">dropna</span><span class="p">()</span>
<span class="c1"># Check the shape of dataframe
</span><span class="n">Data_copy</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">count</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NaNFreeDF1</span> <span class="o">=</span> <span class="n">Data_copy_clean</span><span class="p">[</span><span class="n">Data_copy_clean</span><span class="p">[</span><span class="s">'Average_price'</span><span class="p">].</span><span class="n">notna</span><span class="p">()]</span>
<span class="n">NaNFreeDF1</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">48</span><span class="p">)</span> 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NaNFreeDF1</span><span class="p">.</span><span class="n">count</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NaNFreeDF1</span><span class="p">[</span><span class="s">'London_Borough'</span><span class="p">].</span><span class="n">unique</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">Data_copy_clean</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">NaNFreeDF1</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="c1"># print(NaNFreeDF2.shape)
</span></code></pre></div></div>

<p>Drop the rest of the invalid ‘London Borough’ values.</p>

<p>An elegant way to do this is to make a list of all those invalid values, then use the <em>isin()</em> method, combined with the negation operator <em>~</em>, to remove those values. Call this list <em>nonBoroughs</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A list of non-boroughs. 
</span><span class="n">nonBoroughs</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Inner London'</span><span class="p">,</span> <span class="s">'Outer London'</span><span class="p">,</span> 
               <span class="s">'NORTH EAST'</span><span class="p">,</span> <span class="s">'NORTH WEST'</span><span class="p">,</span> <span class="s">'YORKS &amp; THE HUMBER'</span><span class="p">,</span> 
               <span class="s">'EAST MIDLANDS'</span><span class="p">,</span> <span class="s">'WEST MIDLANDS'</span><span class="p">,</span>
              <span class="s">'EAST OF ENGLAND'</span><span class="p">,</span> <span class="s">'LONDON'</span><span class="p">,</span> <span class="s">'SOUTH EAST'</span><span class="p">,</span> 
              <span class="s">'SOUTH WEST'</span><span class="p">,</span> <span class="s">'England'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NaNFreeDF1</span> <span class="o">=</span> <span class="n">NaNFreeDF1</span><span class="p">[</span><span class="o">~</span><span class="n">NaNFreeDF1</span><span class="p">.</span><span class="n">London_Borough</span><span class="p">.</span><span class="n">isin</span><span class="p">(</span><span class="n">nonBoroughs</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NaNFreeDF1</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

</code></pre></div></div>

<iframe src="/img/london_borough/indextc.html" height="300px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">NaNFreeDF1</span>
</code></pre></div></div>

<p><strong>2.4.Visualizing Data</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First of all, lets make a variable called camden_prices, and assign it the result of filtering df on the following condition:
# df['London_Borough'] == 'Camden'
</span><span class="n">camden_prices</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s">'London_Borough'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Camden'</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="c1"># Make a variable called ax. Assign it the result of calling the plot() method, and plugging in the following values as parameters:
# kind ='line', x = 'Month', y='Average_price'
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">camden_prices</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span> <span class="o">=</span><span class="s">'line'</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="s">'Month'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'Average_price'</span><span class="p">)</span>

<span class="c1"># Finally, call the set_ylabel() method on ax, and set that label to the string: 'Price'. 
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'Price'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Year'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"Camden`s House Price Change Over the Year"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">"CamdanPrice.png"</span><span class="p">)</span>
</code></pre></div></div>

<h1><img src="/img/london_borough/CamdanPrice.png" height="350px" width="100%" /></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="kn">import</span> <span class="nn">matplotlib_inline</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plotting Lonodn Boroughs house prices changes over years
</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">22</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.3</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="n">scatterplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">Month</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">Average_price</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span><span class="s">'London_Borough'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">1.02</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">loc</span><span class="o">=</span><span class="s">'upper left'</span><span class="p">,</span> <span class="n">borderaxespad</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># Set x-axis label
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Date (Year)'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span><span class="mi">21</span><span class="p">)</span>
<span class="c1"># Set y-axis label
</span><span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Price (million)'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span><span class="mi">21</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Lonodn Boroughs house prices changes over years"</span><span class="p">,</span><span class="n">fontsize</span> <span class="o">=</span><span class="mi">21</span><span class="p">);</span>

</code></pre></div></div>

<!-- <img src ="lnd_br_price.png" style="max-width: 100%;" /> -->
<h1 id="-1"><img src="https://raw.githubusercontent.com/jamalkaplan/jamalkaplan.github.io/master/img/lnd_br_price.png" /></h1>

<p>To limit the amount of temporal data-points you have, it would be useful to extract the year from every value in our Month column. 300 is more datapoints than needed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Try this yourself. 
</span><span class="n">df</span><span class="p">[</span><span class="s">'Year'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">'Month'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="n">year</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="n">tail</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Using the function 'groupby' will help you to calculate the mean for each year and for each Borough. 
## As you can see, the variables Borough and Year are now indices
</span><span class="n">dfg</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'London_Borough'</span><span class="p">,</span> <span class="s">'Year'</span><span class="p">]).</span><span class="n">mean</span><span class="p">()</span>
<span class="n">dfg</span><span class="p">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's reset the index for our new DataFrame dfg, and call the head() method on it. 
</span><span class="n">dfg</span> <span class="o">=</span> <span class="n">dfg</span><span class="p">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">dfg</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

</code></pre></div></div>

<p><strong>3. Modeling</strong></p>

<p>We will create a function that will calculate a ratio of house prices, comparing the price of a house in 2018 to the price in 1998.</p>

<p>This function will:</p>
<ol>
  <li>Take a filter of dataframe, specifically where this filter constrains the London_Borough, as an argument. For example, one admissible argument should be: dataframe[dataframe[‘London_Borough’]==’Camden’].</li>
  <li>Get the Average Price for that Borough, for the years 1998 and 2018.</li>
  <li>Calculate the ratio of the Average Price for 1998 divided by the Average Price for 2018.</li>
  <li>Return that ratio.</li>
</ol>

<p>Once you’ve written this function, you ultimately want to use it to iterate through all the unique London_Boroughs and work out the ratio capturing the difference of house prices between 1998 and 2018.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Here's where you should write your function:
</span><span class="k">def</span> <span class="nf">create_price_ratio</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="n">y1998</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s">'Average_price'</span><span class="p">][</span><span class="n">d</span><span class="p">[</span><span class="s">'Year'</span><span class="p">]</span><span class="o">==</span><span class="mi">1998</span><span class="p">])</span>
    <span class="n">y2018</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s">'Average_price'</span><span class="p">][</span><span class="n">d</span><span class="p">[</span><span class="s">'Year'</span><span class="p">]</span><span class="o">==</span><span class="mi">2018</span><span class="p">])</span>
    <span class="n">ratio</span> <span class="o">=</span> <span class="p">[</span><span class="n">y2018</span><span class="o">/</span><span class="n">y1998</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">ratio</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#  Test out the function by calling it with the following argument:
# dfg[dfg['London_Borough']=='Barking &amp; Dagenham']
</span><span class="n">create_price_ratio</span><span class="p">(</span><span class="n">dfg</span><span class="p">[</span><span class="n">dfg</span><span class="p">[</span><span class="s">'London_Borough'</span><span class="p">]</span><span class="o">==</span><span class="s">'Barking &amp; Dagenham'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># We want to do this for all of the London Boroughs. 
# First, let's make an empty dictionary, called final, where we'll store our ratios for each unique London_Borough.
</span><span class="n">final</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Now let's declare a for loop that will iterate through each of the unique elements of the 'London_Borough' column of our DataFrame dfg.
# Call the iterator variable 'b'. 
</span><span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">dfg</span><span class="p">[</span><span class="s">'London_Borough'</span><span class="p">].</span><span class="n">unique</span><span class="p">():</span>
    <span class="c1"># Let's make our parameter to our create_price_ratio function: i.e., we subset dfg on 'London_Borough' == b. 
</span>    <span class="n">borough</span> <span class="o">=</span> <span class="n">dfg</span><span class="p">[</span><span class="n">dfg</span><span class="p">[</span><span class="s">'London_Borough'</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">]</span>
    <span class="c1"># Make a new entry in the final dictionary whose value's the result of calling create_price_ratio with the argument: borough
</span>    <span class="n">final</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">create_price_ratio</span><span class="p">(</span><span class="n">borough</span><span class="p">)</span>
<span class="c1"># We use the function and incorporate that into a new key of the dictionary 
</span><span class="k">print</span><span class="p">(</span><span class="n">final</span><span class="p">)</span> 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Make a variable called df_ratios, and assign it the result of calling the DataFrame method on the dictionary final. 
</span><span class="n">df_ratios</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">final</span><span class="p">)</span>
<span class="n">df_ratios</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># All we need to do now is transpose it, and reset the index! 
</span><span class="n">df_ratios_T</span> <span class="o">=</span> <span class="n">df_ratios</span><span class="p">.</span><span class="n">T</span>
<span class="n">df_ratios</span> <span class="o">=</span> <span class="n">df_ratios_T</span><span class="p">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">df_ratios</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's just rename the 'index' column as 'London_Borough', and the '0' column to '2018'.
</span><span class="n">df_ratios</span><span class="p">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s">'index'</span><span class="p">:</span><span class="s">'Borough'</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="s">'2018'</span><span class="p">},</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_ratios</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">top15</span> <span class="o">=</span> <span class="n">df_ratios</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'2018'</span><span class="p">,</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">top15</span><span class="p">)</span>

</code></pre></div></div>]]></content><author><name>Jamal Kaplan</name></author><summary type="html"><![CDATA[Objectives]]></summary></entry><entry><title type="html">Customer Churn Prediction.</title><link href="http://localhost:4000/2022/06/07/Bank_Churn.html" rel="alternate" type="text/html" title="Customer Churn Prediction." /><published>2022-06-07T07:45:13-07:00</published><updated>2022-06-07T07:45:13-07:00</updated><id>http://localhost:4000/2022/06/07/Bank_Churn</id><content type="html" xml:base="http://localhost:4000/2022/06/07/Bank_Churn.html"><![CDATA[<h1 id="bank-churn-prediction">Bank Churn Prediction</h1>

<h2 id="project-details">Project Details</h2>

<p>In this project, I will create supervised models to predict which users are more likely to churn bank.</p>

<p><strong>The Definition of Churn Rate:</strong></p>

<p>Churn rate, in its broadest sense, is a measure of the number of individuals or items moving out of a collective group over a specific period. It is one of two primary factors that determine the steady-state level of customers a business will supportChurn rate, in its broadest sense, is a measure of the number of individuals or items moving out of a collective group over a specific period. It is one of two primary factors that determine the steady-state level of customers a business will support</p>

<h2 id="prepare-data-and-necessary-libraries">Prepare Data and Necessary Libraries</h2>

<h3 id="install-required-library">Install Required Library</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#importing necessary packages
</span><span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">model_selection</span>
<span class="c1"># Support functions
</span><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>
<span class="c1"># from scipy.stats import uniform
</span><span class="kn">from</span> <span class="nn">imblearn.over_sampling</span> <span class="kn">import</span> <span class="n">SMOTE</span>
<span class="kn">from</span> <span class="nn">sklearn.decomposition</span> <span class="kn">import</span> <span class="n">PCA</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span><span class="p">,</span><span class="n">cross_val_score</span>


<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.compose</span> <span class="kn">import</span> <span class="n">ColumnTransformer</span>
<span class="kn">from</span> <span class="nn">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">from</span> <span class="nn">sklearn.impute</span> <span class="kn">import</span> <span class="n">SimpleImputer</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span><span class="p">,</span> <span class="n">OneHotEncoder</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span>  <span class="n">GridSearchCV</span>
<span class="kn">from</span> <span class="nn">imblearn.over_sampling</span> <span class="kn">import</span> <span class="n">RandomOverSampler</span>
<span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfVectorizer</span>
<span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">CountVectorizer</span>
<span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfTransformer</span>

<span class="c1"># Fit models
</span><span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVC</span> 
<span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>
<span class="kn">from</span> <span class="nn">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KNeighborsClassifier</span>


<span class="c1"># Scoring functions
</span><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">confusion_matrix</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">roc_auc_score</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">roc_curve</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">f1_score</span> <span class="k">as</span> <span class="n">f1</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">plotly.graph_objs</span> <span class="k">as</span> <span class="n">go</span>
<span class="kn">from</span> <span class="nn">plotly.subplots</span> <span class="kn">import</span> <span class="n">make_subplots</span>
<span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="n">ex</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'figure'</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">9</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Set the no of columns to be displayed to 500
</span><span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_columns'</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>

<span class="c1"># Set the no of rows to be displayed to 300
</span><span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">'display.max_rows'</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="load-data-set">Load Data set</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Reading files/Data
</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'BankChurners.csv'</span><span class="p">)</span>
<span class="c1"># Use 2 decimal places in output display
</span><span class="n">pd</span><span class="p">.</span><span class="n">set_option</span><span class="p">(</span><span class="s">"display.precision"</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># There are some columns looks irrelevant
</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]]</span>
<span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span> 
</code></pre></div></div>
<iframe src="/img/bank/indext.html" height="300px" width="100%"></iframe>

<h1 id="data-analysing">Data Analysing</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># let's look at the statistical aspects of the dataframe
</span><span class="n">df</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span>

</code></pre></div></div>
<iframe src="/img/bank/indexd.html" height="300px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get the no of rows and columns
</span><span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\t</span><span class="s"> Dataset has {} rows and {} columns. '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
<span class="n">df</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Print the datatype of each column of the dataframe
</span><span class="n">df</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="data-cleaning">Data Cleaning</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check if there any missing values
</span><span class="n">df</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check if there is any duplicate data
</span><span class="n">df</span><span class="p">.</span><span class="n">duplicated</span><span class="p">().</span><span class="nb">sum</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check if there is only column with one value
</span><span class="n">df</span><span class="p">.</span><span class="n">nunique</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Drop row if there is any missing values
</span>
<span class="n">df</span><span class="p">.</span><span class="n">dropna</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="data-visualizing">Data Visualizing</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">tr1</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Box</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Customer_Age'</span><span class="p">],</span><span class="n">boxmean</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tr2</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Histogram</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Customer_Age'</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="s">'Age Histogram'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr1</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr2</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">fig</span><span class="p">[</span><span class="s">'layout'</span><span class="p">][</span><span class="s">'xaxis'</span><span class="p">][</span><span class="s">'title'</span><span class="p">]</span><span class="o">=</span><span class="s">"Age"</span>
<span class="n">fig</span><span class="p">[</span><span class="s">'layout'</span><span class="p">][</span><span class="s">'xaxis2'</span><span class="p">][</span><span class="s">'title'</span><span class="p">]</span><span class="o">=</span><span class="s">"Age"</span>
<span class="c1"># fig['layout']['yaxis1']['title']="Count"
</span><span class="n">fig</span><span class="p">[</span><span class="s">'layout'</span><span class="p">][</span><span class="s">'yaxis2'</span><span class="p">][</span><span class="s">'title'</span><span class="p">]</span><span class="o">=</span><span class="s">"Count"</span>
<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1200</span><span class="p">,</span> <span class="n">title_text</span><span class="o">=</span><span class="s">"Distribution of Customer Ages"</span><span class="p">,</span> 
    <span class="n">yaxis_title</span><span class="o">=</span><span class="s">"Count"</span><span class="p">,)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file1.html"</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file1.html" height="600px" width="100%"></iframe>

<p>Customer age distribution is normal</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span>
    <span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">subplot_titles</span><span class="o">=</span><span class="p">(</span><span class="s">''</span><span class="p">,</span><span class="s">'&lt;b&gt;Platinum Card Holders'</span><span class="p">,</span><span class="s">'&lt;b&gt;Blue Card Holders&lt;b&gt;'</span><span class="p">,</span><span class="s">'Residuals'</span><span class="p">),</span>
    <span class="n">vertical_spacing</span><span class="o">=</span><span class="mf">0.09</span><span class="p">,</span>
    <span class="n">specs</span><span class="o">=</span><span class="p">[[{</span><span class="s">"type"</span><span class="p">:</span> <span class="s">"pie"</span><span class="p">,</span><span class="s">"rowspan"</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>       <span class="p">,{</span><span class="s">"type"</span><span class="p">:</span> <span class="s">"pie"</span><span class="p">}]</span> <span class="p">,</span>
           <span class="p">[</span><span class="bp">None</span>                               <span class="p">,{</span><span class="s">"type"</span><span class="p">:</span> <span class="s">"pie"</span><span class="p">}]</span>            <span class="p">,</span>                                      
          <span class="p">]</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Pie</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">Gender</span><span class="p">.</span><span class="n">value_counts</span><span class="p">().</span><span class="n">values</span><span class="p">,</span><span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s">'&lt;b&gt;Female&lt;b&gt;'</span><span class="p">,</span><span class="s">'&lt;b&gt;Male&lt;b&gt;'</span><span class="p">],</span><span class="n">hole</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span><span class="n">pull</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.3</span><span class="p">]),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Pie</span><span class="p">(</span>
        <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s">'Female Platinum Card Holders'</span><span class="p">,</span><span class="s">'Male Platinum Card Holders'</span><span class="p">],</span>
        <span class="n">values</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="s">'Card_Category=="Platinum"'</span><span class="p">).</span><span class="n">Gender</span><span class="p">.</span><span class="n">value_counts</span><span class="p">().</span><span class="n">values</span><span class="p">,</span>
        <span class="n">pull</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.5</span><span class="p">],</span>
        <span class="n">hole</span><span class="o">=</span><span class="mf">0.3</span>
        
    <span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">2</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Pie</span><span class="p">(</span>
        <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s">'Female Blue Card Holders'</span><span class="p">,</span><span class="s">'Male Blue Card Holders'</span><span class="p">],</span>
        <span class="n">values</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="s">'Card_Category=="Blue"'</span><span class="p">).</span><span class="n">Gender</span><span class="p">.</span><span class="n">value_counts</span><span class="p">().</span><span class="n">values</span><span class="p">,</span>
        <span class="n">pull</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.2</span><span class="p">,</span><span class="mf">0.5</span><span class="p">],</span>
        <span class="n">hole</span><span class="o">=</span><span class="mf">0.3</span>
    <span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">2</span>
<span class="p">)</span>



<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
    <span class="n">showlegend</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">title_text</span><span class="o">=</span><span class="s">"&lt;b&gt;Distribution Of Gender And Different Card Statuses&lt;b&gt;"</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file2.html" height="690px" width="100%"></iframe>

<p>Although female are more than male in dataset, the difference is not that much large to effect the distribution.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">tr1</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Box</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Dependent_count'</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="s">'Dependent count Box Plot'</span><span class="p">,</span><span class="n">boxmean</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tr2</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Histogram</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Dependent_count'</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="s">'Dependent count Histogram'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr1</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr2</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1200</span><span class="p">,</span> <span class="n">title_text</span><span class="o">=</span><span class="s">"Distribution of Dependent counts (close family size)"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file3.html"</span><span class="p">)</span>
<span class="c1"># fig =px.scatter(x=range(10), y=range(10))
</span>
</code></pre></div></div>

<iframe src="/img/bank/file3.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">ex</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">names</span><span class="o">=</span><span class="s">'Education_Level'</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="s">'Propotion Of Education Levels'</span><span class="p">,</span><span class="n">hole</span><span class="o">=</span><span class="mf">0.43</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file4.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file4.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">ex</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">names</span><span class="o">=</span><span class="s">'Income_Category'</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="s">'Propotion Of Different Income Levels'</span><span class="p">,</span><span class="n">hole</span><span class="o">=</span><span class="mf">0.33</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file5.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file5.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">ex</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">names</span><span class="o">=</span><span class="s">'Card_Category'</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="s">'Propotion Of Different Card Categories'</span><span class="p">,</span><span class="n">hole</span><span class="o">=</span><span class="mf">0.33</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file6.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file6.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">tr1</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Box</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Months_on_book'</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="s">'Months on book Box Plot'</span><span class="p">,</span><span class="n">boxmean</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tr2</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Histogram</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Months_on_book'</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="s">'Months on book Histogram'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr1</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr2</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1200</span><span class="p">,</span> <span class="n">title_text</span><span class="o">=</span><span class="s">"Distribution of months the customer is part of the bank"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file7.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file7.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Kurtosis of Months on book features is : {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">'Months_on_book'</span><span class="p">].</span><span class="n">kurt</span><span class="p">()))</span>
</code></pre></div></div>

<p>Since kurtosis is low as it clearly can be seen from graph and the result, the month as a feature is not normally distributed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">tr1</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Box</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Total_Relationship_Count'</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="s">'Total no. of products Box Plot'</span><span class="p">,</span><span class="n">boxmean</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tr2</span><span class="o">=</span><span class="n">go</span><span class="p">.</span><span class="n">Histogram</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">'Total_Relationship_Count'</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="s">'Total no. of products Histogram'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr1</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span><span class="n">tr2</span><span class="p">,</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">1200</span><span class="p">,</span> <span class="n">title_text</span><span class="o">=</span><span class="s">"Distribution of Total no. of products held by the customer"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file8.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file8.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">ex</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">names</span><span class="o">=</span><span class="s">'Attrition_Flag'</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="s">'Churn Customer vs Not Churn Customer'</span><span class="p">,</span><span class="n">hole</span><span class="o">=</span><span class="mf">0.33</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file14.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
<iframe src="/img/bank/file14.html" height="690px" width="100%"></iframe>

<p>The above graph says majorty of the customers are existing customers. That means the data set is not balanced thus I will upsample the dataset to balance.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">170</span><span class="p">))</span>
<span class="n">row_num</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">index_pos</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">num_var</span><span class="p">:</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="n">row_num</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">index_pos</span><span class="p">)</span>
    <span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="n">col</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span> <span class="s">'Attrition_Flag'</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="s">'Attrition_Flag'</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">df</span><span class="p">)</span>
    <span class="n">index_pos</span> <span class="o">=</span> <span class="n">index_pos</span> <span class="o">+</span> <span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Visulazitaion with heatmap to observe correlation
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">df_corr</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">corr</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="s">"pearson"</span><span class="p">)</span>
<span class="c1"># mask = np.zeros_like(np.array(df_corr))
# mask[np.triu_indices_from(mask)] = True
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">heatmap</span><span class="p">(</span><span class="n">df_corr</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_copy</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_copy</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>
<h1 id="prepare-dataset-for-ml-trainig">Prepare Dataset for ML trainig</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_copy</span><span class="p">.</span><span class="n">columns</span>
</code></pre></div></div>
<p>Here, dummy variable will be created for some features and also unknown columns will be dropped.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Encoding Categorical Variables
</span><span class="n">df_copy</span><span class="p">.</span><span class="n">Attrition_Flag</span> <span class="o">=</span><span class="n">df_copy</span><span class="p">.</span><span class="n">Attrition_Flag</span><span class="p">.</span><span class="n">replace</span><span class="p">({</span><span class="s">'Attrited Customer'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s">'Existing Customer'</span><span class="p">:</span><span class="mi">0</span><span class="p">})</span>
<span class="n">df_copy</span><span class="p">.</span><span class="n">Gender</span> <span class="o">=</span> <span class="n">df_copy</span><span class="p">.</span><span class="n">Gender</span><span class="p">.</span><span class="n">replace</span><span class="p">({</span><span class="s">'F'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s">'M'</span><span class="p">:</span><span class="mi">0</span><span class="p">})</span>
<span class="n">df_copy</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_copy</span><span class="p">,</span><span class="n">pd</span><span class="p">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_copy</span><span class="p">[</span><span class="s">'Education_Level'</span><span class="p">]).</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Unknown'</span><span class="p">])],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df_copy</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_copy</span><span class="p">,</span><span class="n">pd</span><span class="p">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_copy</span><span class="p">[</span><span class="s">'Income_Category'</span><span class="p">]).</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Unknown'</span><span class="p">])],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df_copy</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_copy</span><span class="p">,</span><span class="n">pd</span><span class="p">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_copy</span><span class="p">[</span><span class="s">'Marital_Status'</span><span class="p">]).</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Unknown'</span><span class="p">])],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df_copy</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_copy</span><span class="p">,</span><span class="n">pd</span><span class="p">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">df_copy</span><span class="p">[</span><span class="s">'Card_Category'</span><span class="p">]).</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'Platinum'</span><span class="p">])],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">df_copy</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Education_Level'</span><span class="p">,</span><span class="s">'Income_Category'</span><span class="p">,</span><span class="s">'Marital_Status'</span><span class="p">,</span><span class="s">'Card_Category'</span><span class="p">,</span><span class="s">'CLIENTNUM'</span><span class="p">],</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_copy</span><span class="p">[</span><span class="n">df_copy</span><span class="p">.</span><span class="n">columns</span><span class="p">[:]]</span>
</code></pre></div></div>

<p>As aformentioned , it is obvious that data is imbalanced hereI use SMOTE() method to balance data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Here data is upsampled since the data is imbalanced
</span><span class="n">oversample</span> <span class="o">=</span> <span class="n">SMOTE</span><span class="p">()</span>
<span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">oversample</span><span class="p">.</span><span class="n">fit_resample</span><span class="p">(</span><span class="n">df_copy</span><span class="p">[</span><span class="n">df_copy</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">:]],</span> <span class="n">df_copy</span><span class="p">[</span><span class="n">df_copy</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
<span class="n">usampled_df</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">Churn</span> <span class="o">=</span> <span class="n">y</span><span class="p">)</span>
<span class="n">usampled_df</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ohe_data</span> <span class="o">=</span><span class="n">usampled_df</span><span class="p">[</span><span class="n">usampled_df</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">15</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]].</span><span class="n">copy</span><span class="p">()</span>

<span class="n">usampled_df</span> <span class="o">=</span> <span class="n">usampled_df</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">usampled_df</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">15</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N_COMPONENTS</span> <span class="o">=</span> <span class="mi">4</span>

<span class="n">pca_model</span> <span class="o">=</span> <span class="n">PCA</span><span class="p">(</span><span class="n">n_components</span> <span class="o">=</span> <span class="n">N_COMPONENTS</span> <span class="p">)</span>

<span class="n">pc_matrix</span> <span class="o">=</span> <span class="n">pca_model</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">ohe_data</span><span class="p">)</span>

<span class="n">evr</span> <span class="o">=</span> <span class="n">pca_model</span><span class="p">.</span><span class="n">explained_variance_ratio_</span>
<span class="n">total_var</span> <span class="o">=</span> <span class="n">evr</span><span class="p">.</span><span class="nb">sum</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span>
<span class="n">cumsum_evr</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">cumsum</span><span class="p">(</span><span class="n">evr</span><span class="p">)</span>

<span class="n">trace1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"name"</span><span class="p">:</span> <span class="s">"individual explained variance"</span><span class="p">,</span> 
    <span class="s">"type"</span><span class="p">:</span> <span class="s">"bar"</span><span class="p">,</span> 
    <span class="s">'y'</span><span class="p">:</span><span class="n">evr</span><span class="p">}</span>
<span class="n">trace2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"name"</span><span class="p">:</span> <span class="s">"cumulative explained variance"</span><span class="p">,</span> 
    <span class="s">"type"</span><span class="p">:</span> <span class="s">"scatter"</span><span class="p">,</span> 
    <span class="s">'y'</span><span class="p">:</span><span class="n">cumsum_evr</span><span class="p">}</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">trace1</span><span class="p">,</span> <span class="n">trace2</span><span class="p">]</span>
<span class="n">layout</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"xaxis"</span><span class="p">:</span> <span class="p">{</span><span class="s">"title"</span><span class="p">:</span> <span class="s">"Principal components"</span><span class="p">},</span> 
    <span class="s">"yaxis"</span><span class="p">:</span> <span class="p">{</span><span class="s">"title"</span><span class="p">:</span> <span class="s">"Explained variance ratio"</span><span class="p">},</span>
  <span class="p">}</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">layout</span><span class="o">=</span><span class="n">layout</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span>     <span class="n">title</span><span class="o">=</span><span class="s">'Explained Variance Using {} Dimensions'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">N_COMPONENTS</span><span class="p">))</span>

<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file9.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file9.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">usampled_df_with_pcs</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">usampled_df</span><span class="p">,</span><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">pc_matrix</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'PC-{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">N_COMPONENTS</span><span class="p">)])],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_features</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Total_Trans_Ct'</span><span class="p">,</span><span class="s">'PC-3'</span><span class="p">,</span><span class="s">'PC-1'</span><span class="p">,</span><span class="s">'PC-0'</span><span class="p">,</span><span class="s">'PC-2'</span><span class="p">,</span><span class="s">'Total_Ct_Chng_Q4_Q1'</span><span class="p">,</span><span class="s">'Total_Relationship_Count'</span><span class="p">]</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">usampled_df_with_pcs</span><span class="p">[</span><span class="n">X_features</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">usampled_df_with_pcs</span><span class="p">[</span><span class="s">'Churn'</span><span class="p">]</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Splitted data after oversampling
</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">X_test_smt</span><span class="p">,</span> <span class="n">y_train_smt</span><span class="p">,</span> <span class="n">y_test_smt</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span><span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="tune-hyperparameters-for-the-best-model">Tune hyperparameters for the Best Model</h2>

<p>Here, I will create a pipeline along with parameters for different classification model. GridSearch will be used to chose best hyperparameters among different combination of hyperparameters.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># HyperParameters for Tunning
</span><span class="n">param_grid_knn</span> <span class="o">=</span> <span class="p">{</span>
<span class="c1"># HyperParameters K Nearest Neighbors Model
</span><span class="s">'classifier__n_neighbors'</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span>
<span class="s">"prep__num__imputer__strategy"</span><span class="p">:</span> <span class="p">[</span><span class="s">'mean'</span><span class="p">,</span><span class="s">'median'</span><span class="p">]</span>
<span class="p">}</span>

<span class="n">param_grid_forest</span> <span class="o">=</span> <span class="p">{</span>
<span class="c1"># HyperParameters for Random Forest Model
</span>                <span class="s">"classifier__n_estimators"</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
                 <span class="s">"classifier__max_depth"</span><span class="p">:[</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">25</span><span class="p">,],</span>
                 <span class="s">"classifier__min_samples_leaf"</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">],</span>
                 <span class="s">"classifier__max_leaf_nodes"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
                 <span class="p">}</span>


<span class="n">param_grid_logReg</span><span class="o">=</span> <span class="p">{</span>
<span class="c1"># HyperParameters for Logistic Regression Model
</span>                <span class="s">"classifier__penalty"</span><span class="p">:</span> <span class="p">[</span><span class="s">'l2'</span><span class="p">],</span>
                 <span class="s">"classifier__C"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">logspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
                 <span class="p">}</span>
<span class="n">param_grid_svc</span> <span class="o">=</span><span class="p">{</span>
<span class="c1"># HyperParameters for Support Vector Machne Model
</span>                  <span class="s">'classifier__gamma'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">],</span>
                  <span class="s">'classifier__kernel'</span><span class="p">:</span> <span class="p">[</span><span class="s">'linear'</span><span class="p">,</span> <span class="s">'poly'</span><span class="p">,</span> <span class="s">'rbf'</span><span class="p">],</span>
                 <span class="s">'classifier__C'</span><span class="p">:</span> <span class="p">[</span><span class="mi">100</span><span class="p">]</span>
                 <span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Here created a function for pipline
</span><span class="k">def</span> <span class="nf">pipline_model</span><span class="p">(</span><span class="n">model</span><span class="p">):</span>

    <span class="n">numeric_feature</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Total_Trans_Ct'</span><span class="p">,</span><span class="s">'PC-3'</span><span class="p">,</span><span class="s">'PC-1'</span><span class="p">,</span><span class="s">'PC-0'</span><span class="p">,</span><span class="s">'PC-2'</span><span class="p">,</span><span class="s">'Total_Ct_Chng_Q4_Q1'</span><span class="p">,</span><span class="s">'Total_Relationship_Count'</span><span class="p">]</span>
    <span class="n">numeric_transformer</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">(</span><span class="n">steps</span><span class="o">=</span><span class="p">[</span>
    <span class="p">(</span><span class="s">'imputer'</span><span class="p">,</span><span class="n">SimpleImputer</span><span class="p">(</span><span class="n">strategy</span><span class="o">=</span> <span class="s">'median'</span><span class="p">)),</span>
    <span class="p">(</span><span class="s">'scaler'</span><span class="p">,</span><span class="n">StandardScaler</span><span class="p">())</span>                                      
    <span class="p">])</span>
    <span class="n">preprocessor</span> <span class="o">=</span> <span class="n">ColumnTransformer</span><span class="p">(</span><span class="n">transformers</span><span class="o">=</span><span class="p">[</span>
    <span class="p">(</span><span class="s">'num'</span><span class="p">,</span> <span class="n">numeric_transformer</span><span class="p">,</span> <span class="n">numeric_feature</span><span class="p">)</span>    
    <span class="p">])</span>
    <span class="n">clf</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">(</span><span class="n">steps</span><span class="o">=</span><span class="p">[</span>
    <span class="p">(</span><span class="s">'prep'</span><span class="p">,</span> <span class="n">preprocessor</span><span class="p">),</span>
    <span class="p">(</span><span class="s">'classifier'</span><span class="p">,</span><span class="n">model</span><span class="p">),</span>
    <span class="p">])</span>
    <span class="k">return</span> <span class="n">clf</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Creating a variable for pipeline_model function for each model.
</span><span class="n">clf_svc</span> <span class="o">=</span> <span class="n">pipline_model</span><span class="p">(</span><span class="n">SVC</span><span class="p">(</span><span class="n">probability</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
<span class="n">clf_random_forest</span> <span class="o">=</span> <span class="n">pipline_model</span><span class="p">(</span><span class="n">RandomForestClassifier</span><span class="p">())</span>
<span class="n">clf_knn</span> <span class="o">=</span> <span class="n">pipline_model</span><span class="p">(</span><span class="n">KNeighborsClassifier</span><span class="p">())</span>
<span class="n">clf_logisticreg</span> <span class="o">=</span> <span class="n">pipline_model</span><span class="p">(</span><span class="n">LogisticRegression</span><span class="p">(</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">1000</span><span class="p">))</span> 

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Creating a variable for Gridsearch for each model
</span><span class="n">grid_search_forest</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_random_forest</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">scoring</span><span class="o">=</span><span class="s">'neg_mean_squared_error'</span><span class="p">)</span>
<span class="n">grid_search_knn</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_knn</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">grid_search_svc</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_svc</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">refit</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> 
<span class="n">grid_search_logReg</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_logisticreg</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Created a function run all four models with their pipelnes to compare their results.
</span>
<span class="n">knn</span><span class="o">=</span>    <span class="mi">1</span>
<span class="n">forest</span><span class="o">=</span> <span class="mi">2</span>
<span class="n">svc</span><span class="o">=</span>    <span class="mi">3</span>
<span class="n">logisticreg</span><span class="o">=</span> <span class="mi">4</span>

<span class="k">def</span> <span class="nf">model_score</span><span class="p">(</span><span class="n">GSCV</span><span class="p">):</span>
    
    
    <span class="k">if</span> <span class="n">GSCV</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
    
        <span class="n">grid_search_knn</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_knn</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">grid_search_knn</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
        <span class="n">pred</span><span class="o">=</span><span class="n">grid_search_knn</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Confusion matrix of knn:</span><span class="se">\n</span><span class="s"> "</span><span class="p">,</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">classification_report</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        <span class="n">score</span><span class="o">=</span> <span class="n">grid_search_knn</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">)</span>  
        <span class="k">print</span><span class="p">(</span><span class="s">'Score of knneighbors is '</span><span class="p">,</span><span class="n">score</span><span class="p">)</span>
        <span class="n">cros_val_score</span> <span class="o">=</span>  <span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_knn</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span> <span class="n">y_train_smt</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Cross validation score of knneighbors is "</span><span class="p">,</span> <span class="n">cros_val_score</span><span class="p">)</span>

    
    
    <span class="k">elif</span> <span class="n">GSCV</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">grid_search_forest</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_random_forest</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">grid_search_forest</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
        
        <span class="n">pred</span><span class="o">=</span><span class="n">grid_search_forest</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Confusion matrix of random forest:</span><span class="se">\n</span><span class="s"> "</span><span class="p">,</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">classification_report</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        
        <span class="n">score</span><span class="o">=</span> <span class="n">grid_search_forest</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Score of random forest is '</span><span class="p">,</span><span class="n">score</span><span class="p">)</span>
        <span class="n">cros_val_score</span> <span class="o">=</span>  <span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_random_forest</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span> <span class="n">y_train_smt</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Cross validation score of random forest is "</span><span class="p">,</span> <span class="n">cros_val_score</span><span class="p">)</span>

    

    <span class="k">elif</span> <span class="n">GSCV</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="n">ggrid_search_svc</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_svc</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">refit</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> 
        <span class="n">ggrid_search_svc</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
        
        <span class="n">pred</span><span class="o">=</span><span class="n">ggrid_search_svc</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Confusion matrix of SVC:</span><span class="se">\n</span><span class="s"> "</span><span class="p">,</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">classification_report</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        
        <span class="n">score</span><span class="o">=</span>  <span class="n">ggrid_search_svc</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">)</span>  
        <span class="k">print</span><span class="p">(</span><span class="s">'The score of svc is '</span><span class="p">,</span><span class="n">score</span><span class="p">)</span>
        <span class="n">cros_val_score</span> <span class="o">=</span>  <span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_svc</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span> <span class="n">y_train_smt</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"the cross validation score of SVC is "</span><span class="p">,</span> <span class="n">cros_val_score</span><span class="p">)</span>

    <span class="k">elif</span> <span class="n">GSCV</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
        <span class="n">grid_search_logReg</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_logteg</span><span class="p">,</span><span class="n">param_grid</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">grid_search_logReg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
        
        <span class="n">pred</span><span class="o">=</span><span class="n">grid_search_logReg</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Confusion matrix of logisticReg :</span><span class="se">\n</span><span class="s"> "</span><span class="p">,</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">classification_report</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">pred</span><span class="p">))</span>
        
        <span class="n">score</span><span class="o">=</span>  <span class="n">grid_search_logReg</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'The score of rlogistic regression is '</span><span class="p">,</span><span class="n">score</span><span class="p">)</span>
        <span class="n">cros_val_score</span> <span class="o">=</span>  <span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_logteg</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span> <span class="n">y_train_smt</span><span class="p">).</span><span class="n">mean</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"the cross validation score of logistic regression is "</span><span class="p">,</span> <span class="n">cros_val_score</span><span class="p">)</span>
 

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Here I used VotingClassifier to select best model among four models.
</span><span class="kn">from</span> <span class="nn">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">VotingClassifier</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">VotingClassifier</span><span class="p">(</span><span class="n">estimators</span><span class="o">=</span><span class="p">[(</span><span class="s">'lr'</span><span class="p">,</span> <span class="n">grid_search_logReg</span><span class="p">),</span> <span class="p">(</span><span class="s">'knn'</span><span class="p">,</span><span class="n">grid_search_knn</span><span class="p">),(</span><span class="s">'forest'</span><span class="p">,</span><span class="n">grid_search_forest</span><span class="p">),(</span><span class="s">'svc'</span><span class="p">,</span> <span class="n">grid_search_svc</span><span class="p">)],</span> <span class="n">voting</span><span class="o">=</span><span class="s">'soft'</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">))</span>

</code></pre></div></div>

<p>Random Forest Model gives the highest result  among the models, however Votingclasiffier select Sopport Vector machine model although it is slightly smaller than Random Forest Model. Since SVM is selected, I will save this model as a reference.</p>

<h2 id="model-selection">Model Selection</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">grid_search_svc</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">clf_svc</span><span class="p">,</span><span class="n">param_grid_svc</span><span class="p">,</span><span class="n">refit</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> 
<span class="n">best_model</span> <span class="o">=</span> <span class="n">grid_search_svc</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">joblib</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>
<span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">f1_score</span>
<span class="c1"># saving the model to local disk
# filename = 'finalized_model.sav'
# joblib.dump(best_model, filename)
</span>
 
<span class="c1"># load the model from local disk to use it
</span><span class="n">loaded_model</span> <span class="o">=</span> <span class="n">joblib</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">loaded_model</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">,</span> <span class="n">y_test_smt</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">loaded_model</span><span class="p">.</span><span class="n">best_estimator_</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">loaded_model</span><span class="p">.</span><span class="n">best_score_</span><span class="p">)</span>
<span class="n">predict</span> <span class="o">=</span> <span class="n">loaded_model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"accuracy "</span><span class="p">,</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">predict</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"f1score "</span><span class="p">,</span> <span class="n">f1_score</span><span class="p">(</span><span class="n">y_test_smt</span><span class="p">,</span><span class="n">predict</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 
</span><span class="n">rf_f1_cross_val_scores</span> <span class="o">=</span> <span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_random_forest</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">scoring</span><span class="o">=</span><span class="s">'f1'</span><span class="p">)</span>
<span class="n">knn_f1_cross_val_scores</span><span class="o">=</span><span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_knn</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">scoring</span><span class="o">=</span><span class="s">'f1'</span><span class="p">)</span>
<span class="n">svm_f1_cross_val_scores</span><span class="o">=</span><span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_svc</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">scoring</span><span class="o">=</span><span class="s">'f1'</span><span class="p">)</span>
<span class="n">lreg_f1_cross_val_scores</span><span class="o">=</span><span class="n">cross_val_score</span><span class="p">(</span><span class="n">clf_logisticreg</span><span class="p">,</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">scoring</span><span class="o">=</span><span class="s">'f1'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">make_subplots</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">shared_xaxes</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">subplot_titles</span><span class="o">=</span><span class="p">(</span><span class="s">'Random Forest Cross Val Scores'</span><span class="p">,</span>
                                                                     <span class="s">'KNN Cross Val Scores'</span><span class="p">,</span>
                                                                    <span class="s">'SVM Cross Val Scores'</span><span class="p">,</span> <span class="s">'Logistic Regression'</span><span class="p">))</span>

<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">rf_f1_cross_val_scores</span><span class="p">))),</span><span class="n">y</span><span class="o">=</span><span class="n">rf_f1_cross_val_scores</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">'Random Forest'</span><span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">knn_f1_cross_val_scores</span><span class="p">))),</span><span class="n">y</span><span class="o">=</span><span class="n">knn_f1_cross_val_scores</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">'KNN'</span><span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">svm_f1_cross_val_scores</span><span class="p">))),</span><span class="n">y</span><span class="o">=</span><span class="n">svm_f1_cross_val_scores</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">'SVM'</span><span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">add_trace</span><span class="p">(</span>
    <span class="n">go</span><span class="p">.</span><span class="n">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">lreg_f1_cross_val_scores</span><span class="p">))),</span><span class="n">y</span><span class="o">=</span><span class="n">lreg_f1_cross_val_scores</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="s">'Logistic Regression'</span><span class="p">),</span>
    <span class="n">row</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span>
<span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">700</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">900</span><span class="p">,</span> <span class="n">title_text</span><span class="o">=</span><span class="s">"Different Model 5 Fold Cross Validation"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">update_yaxes</span><span class="p">(</span><span class="n">title_text</span><span class="o">=</span><span class="s">"F1 Score"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">update_xaxes</span><span class="p">(</span><span class="n">title_text</span><span class="o">=</span><span class="s">"Fold #"</span><span class="p">)</span>
<span class="c1"># fig.write_html("./file15.html")
</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file15.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clf_random_forest</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
<span class="n">rf_prediction</span> <span class="o">=</span> <span class="n">clf_random_forest</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>

<span class="n">clf_knn</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
<span class="n">knn_prediction</span> <span class="o">=</span> <span class="n">clf_knn</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>

<span class="n">clf_svc</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
<span class="n">svm_prediction</span> <span class="o">=</span> <span class="n">clf_svc</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>

<span class="n">clf_logisticreg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train_smt</span><span class="p">,</span><span class="n">y_train_smt</span><span class="p">)</span>
<span class="n">lreg_prediction</span> <span class="o">=</span> <span class="n">clf_logisticreg</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test_smt</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">go</span><span class="p">.</span><span class="n">Table</span><span class="p">(</span><span class="n">header</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s">'&lt;b&gt;Model&lt;b&gt;'</span><span class="p">,</span> <span class="s">'&lt;b&gt;F1 Score On Test Data&lt;b&gt;'</span><span class="p">],</span>
                                           <span class="n">line_color</span><span class="o">=</span><span class="s">'darkslategray'</span><span class="p">,</span>
    <span class="n">fill_color</span><span class="o">=</span><span class="s">'whitesmoke'</span><span class="p">,</span>
    <span class="n">align</span><span class="o">=</span><span class="p">[</span><span class="s">'center'</span><span class="p">,</span><span class="s">'center'</span><span class="p">],</span>
    <span class="n">font</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s">'black'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">18</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">40</span><span class="p">),</span>
                               
                 <span class="n">cells</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="p">[[</span><span class="s">'&lt;b&gt;Random Forest&lt;b&gt;'</span><span class="p">,</span> <span class="s">'&lt;b&gt;KNN&lt;b&gt;'</span><span class="p">,</span><span class="s">'&lt;b&gt;SVM&lt;b&gt;'</span><span class="p">,</span><span class="s">'&lt;b&gt;LogisticReg&lt;b&gt;'</span><span class="p">],</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">rf_prediction</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">),</span><span class="mi">2</span><span class="p">),</span> 
                                                                          <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">knn_prediction</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">),</span><span class="mi">2</span><span class="p">),</span>
                                                                          <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">svm_prediction</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">),</span><span class="mi">2</span><span class="p">),</span>
                                                                         <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">lreg_prediction</span><span class="p">,</span><span class="n">y_test_smt</span><span class="p">),</span><span class="mi">2</span><span class="p">)]]))</span>
                     <span class="p">])</span>

<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">'Model Results On Test Data'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file10.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file10.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ohe_data</span> <span class="o">=</span><span class="n">df_copy</span><span class="p">[</span><span class="n">df_copy</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">16</span><span class="p">:]].</span><span class="n">copy</span><span class="p">()</span>
<span class="n">pc_matrix</span> <span class="o">=</span> <span class="n">pca_model</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">ohe_data</span><span class="p">)</span>
<span class="n">original_df_with_pcs</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df_copy</span><span class="p">,</span><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">pc_matrix</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'PC-{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">N_COMPONENTS</span><span class="p">)])],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">unsampled_data_prediction_RF</span> <span class="o">=</span> <span class="n">clf_random_forest</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="n">X_features</span><span class="p">])</span>
<span class="n">unsampled_data_prediction_knn</span> <span class="o">=</span> <span class="n">clf_knn</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="n">X_features</span><span class="p">])</span>
<span class="n">unsampled_data_prediction_SVM</span> <span class="o">=</span> <span class="n">clf_svc</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="n">X_features</span><span class="p">])</span>
<span class="n">unsampled_data_prediction_LR</span> <span class="o">=</span> <span class="n">clf_logisticreg</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="n">X_features</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="n">Figure</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">[</span><span class="n">go</span><span class="p">.</span><span class="n">Table</span><span class="p">(</span><span class="n">header</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s">'&lt;b&gt;Model&lt;b&gt;'</span><span class="p">,</span> <span class="s">'&lt;b&gt;F1 Score On Test Data&lt;b&gt;'</span><span class="p">],</span>
                                           <span class="n">line_color</span><span class="o">=</span><span class="s">'darkslategray'</span><span class="p">,</span>
    <span class="n">fill_color</span><span class="o">=</span><span class="s">'whitesmoke'</span><span class="p">,</span>
    <span class="n">align</span><span class="o">=</span><span class="p">[</span><span class="s">'center'</span><span class="p">,</span><span class="s">'center'</span><span class="p">],</span>
    <span class="n">font</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s">'black'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">18</span><span class="p">),</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">40</span><span class="p">),</span>
                               
                 <span class="n">cells</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">values</span><span class="o">=</span><span class="p">[[</span><span class="s">'&lt;b&gt;Random Forest&lt;b&gt;'</span><span class="p">,</span> <span class="s">'&lt;b&gt;KNN&lt;b&gt;'</span><span class="p">,</span><span class="s">'&lt;b&gt;SVM&lt;b&gt;'</span><span class="p">,</span><span class="s">'&lt;b&gt;LogisticReg&lt;b&gt;'</span><span class="p">],</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_RF</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">),</span> 
                                                                          <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_knn</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">),</span>
                                                                          <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_SVM</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">),</span>
                                                                         <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_LR</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">)]]))</span>
                     <span class="p">])</span>

<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">'F1 Scores for Models Before Upsampling Data'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file11.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<iframe src="/img/bank/file11.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Creating f1 scores of models
</span><span class="n">score_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_RF</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">),</span>
              <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_knn</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">),</span>
             <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_SVM</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">),</span>
             <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">unsampled_data_prediction_LR</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">]),</span><span class="mi">2</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Creating dataFrame for models score
</span><span class="n">Model_Scores</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">([</span><span class="n">score_list</span><span class="p">],</span>
                      <span class="n">columns</span><span class="o">=</span><span class="p">[[</span><span class="s">'Random Forest'</span><span class="p">,</span> <span class="s">'KNN'</span><span class="p">,</span><span class="s">'SVM'</span><span class="p">,</span><span class="s">'LogisticReg'</span><span class="p">]])</span>

<span class="n">Model_Scores</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<p>From above table it is clear that without balancing data, model perfotmances are quite weak.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">plotly.figure_factory</span> <span class="k">as</span> <span class="n">ff</span>
<span class="n">z</span><span class="o">=</span><span class="n">confusion_matrix</span><span class="p">(</span><span class="n">unsampled_data_prediction_SVM</span><span class="p">,</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">])</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">ff</span><span class="p">.</span><span class="n">create_annotated_heatmap</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="s">'Not Churn'</span><span class="p">,</span><span class="s">'Churn'</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="s">'Predicted Not Churn'</span><span class="p">,</span><span class="s">'Predicted Churn'</span><span class="p">],</span> <span class="n">colorscale</span><span class="o">=</span><span class="s">'Viridis'</span><span class="p">,</span><span class="n">xgap</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">ygap</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">fig</span><span class="p">[</span><span class="s">'data'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">'showscale'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">fig</span><span class="p">.</span><span class="n">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">'Prediction On Original Data With Support Vector Machine Model Confusion Matrix'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">write_html</span><span class="p">(</span><span class="s">"./file12.html"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div></div>

<iframe src="/img/bank/file12.html" height="690px" width="100%"></iframe>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">scikitplot</span> <span class="k">as</span> <span class="n">skplt</span>
<span class="n">unsampled_data_prediction_SVC</span> <span class="o">=</span> <span class="n">clf_svc</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="n">X_features</span><span class="p">])</span>
<span class="n">skplt</span><span class="p">.</span><span class="n">metrics</span><span class="p">.</span><span class="n">plot_precision_recall</span><span class="p">(</span><span class="n">original_df_with_pcs</span><span class="p">[</span><span class="s">'Attrition_Flag'</span><span class="p">],</span> <span class="n">unsampled_data_prediction_SVC</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">prop</span><span class="o">=</span><span class="p">{</span><span class="s">'size'</span><span class="p">:</span> <span class="mi">20</span><span class="p">})</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Precision-Recall Curve for Support Vector Machine Model"</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
<iframe src="/img/bank/curve.png" height="690px" width="100%"></iframe>

<h1 id="conlusion">Conlusion</h1>

<p>In this project Bank customer churn data analyzed. There is huge difference between the balanced and imbalnced data results. 
Here the importnce of resampling SMOTE() method’s importance comes into play.</p>

<p>Another point is that despite obtaining higher result from random forest model, VotingClassfier, which select best model among introduced model, selected support vector machine model</p>]]></content><author><name>Jamal Kaplan</name></author><summary type="html"><![CDATA[Bank Churn Prediction]]></summary></entry></feed>